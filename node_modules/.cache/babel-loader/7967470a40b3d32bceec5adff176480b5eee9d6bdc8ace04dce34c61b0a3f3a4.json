{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\nconst noopStorage = {\n  getItem: noop,\n  setItem: noop,\n  removeItem: noop,\n  keys: [],\n  getAllKeys: noop\n};\nfunction hasStorage(storageType) {\n  if (typeof self !== 'object' || !(storageType in self)) {\n    return false;\n  }\n  try {\n    const storage = self[storageType];\n    const testKey = `reduxjs-toolkit-persist ${storageType} test`;\n    storage.setItem(testKey, 'test');\n    storage.getItem(testKey);\n    storage.removeItem(testKey);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') console.warn(`reduxjs-toolkit-persist ${storageType} test failed, persistence will be disabled.`);\n    return false;\n  }\n  return true;\n}\nfunction getStorage(type) {\n  const storageType = `${type}Storage`;\n  if (hasStorage(storageType)) return self[storageType];else {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`reduxjs-toolkit-persist failed to create sync storage. falling back to noop storage.`);\n    }\n    return noopStorage;\n  }\n}\nexports.default = getStorage;","map":{"version":3,"names":["Object","defineProperty","exports","value","noop","noopStorage","getItem","setItem","removeItem","keys","getAllKeys","hasStorage","storageType","self","storage","testKey","e","process","env","NODE_ENV","console","warn","getStorage","type","error","default"],"sources":["C:/Users/kyhh3/Desktop/redux-1-main (2)/node_modules/reduxjs-toolkit-persist/lib/storage/getStorage.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() { }\nconst noopStorage = {\n    getItem: noop,\n    setItem: noop,\n    removeItem: noop,\n    keys: [],\n    getAllKeys: noop,\n};\nfunction hasStorage(storageType) {\n    if (typeof self !== 'object' || !(storageType in self)) {\n        return false;\n    }\n    try {\n        const storage = self[storageType];\n        const testKey = `reduxjs-toolkit-persist ${storageType} test`;\n        storage.setItem(testKey, 'test');\n        storage.getItem(testKey);\n        storage.removeItem(testKey);\n    }\n    catch (e) {\n        if (process.env.NODE_ENV !== 'production')\n            console.warn(`reduxjs-toolkit-persist ${storageType} test failed, persistence will be disabled.`);\n        return false;\n    }\n    return true;\n}\nfunction getStorage(type) {\n    const storageType = `${type}Storage`;\n    if (hasStorage(storageType))\n        return self[storageType];\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            console.error(`reduxjs-toolkit-persist failed to create sync storage. falling back to noop storage.`);\n        }\n        return noopStorage;\n    }\n}\nexports.default = getStorage;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA,SAASC,IAAI,GAAG,CAAE;AAClB,MAAMC,WAAW,GAAG;EAChBC,OAAO,EAAEF,IAAI;EACbG,OAAO,EAAEH,IAAI;EACbI,UAAU,EAAEJ,IAAI;EAChBK,IAAI,EAAE,EAAE;EACRC,UAAU,EAAEN;AAChB,CAAC;AACD,SAASO,UAAU,CAACC,WAAW,EAAE;EAC7B,IAAI,OAAOC,IAAI,KAAK,QAAQ,IAAI,EAAED,WAAW,IAAIC,IAAI,CAAC,EAAE;IACpD,OAAO,KAAK;EAChB;EACA,IAAI;IACA,MAAMC,OAAO,GAAGD,IAAI,CAACD,WAAW,CAAC;IACjC,MAAMG,OAAO,GAAI,2BAA0BH,WAAY,OAAM;IAC7DE,OAAO,CAACP,OAAO,CAACQ,OAAO,EAAE,MAAM,CAAC;IAChCD,OAAO,CAACR,OAAO,CAACS,OAAO,CAAC;IACxBD,OAAO,CAACN,UAAU,CAACO,OAAO,CAAC;EAC/B,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EACrCC,OAAO,CAACC,IAAI,CAAE,2BAA0BT,WAAY,6CAA4C,CAAC;IACrG,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AACA,SAASU,UAAU,CAACC,IAAI,EAAE;EACtB,MAAMX,WAAW,GAAI,GAAEW,IAAK,SAAQ;EACpC,IAAIZ,UAAU,CAACC,WAAW,CAAC,EACvB,OAAOC,IAAI,CAACD,WAAW,CAAC,CAAC,KACxB;IACD,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCC,OAAO,CAACI,KAAK,CAAE,sFAAqF,CAAC;IACzG;IACA,OAAOnB,WAAW;EACtB;AACJ;AACAH,OAAO,CAACuB,OAAO,GAAGH,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}