{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\n//import counterSlice from './counter/counterSlice'\nimport userSlice from './user/userSlice';\nimport cartSlice from './cart/cartSlice';\nimport { persistStore, persistReducer } from 'reduxjs-toolkit-persist';\n//persistReducer 리듀서가 실행될때 persist 를 같이 사용하게 묶어서 사용\nimport storage from 'reduxjs-toolkit-persist/lib/storage';\nimport productSlice from './product/productSlice';\n//import storageSession from 'reduxjs-toolkit-persist/lib/storage/session' //세션스토리지\n\nconst persistConfig = {\n  key: 'root',\n  //  localStorage에 저장될 때의 key값.\n  storage\n};\nconst rootReducer = combineReducers({\n  cart: cartSlice,\n  user: userSlice,\n  product: productSlice\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n//rootReducer 와 persist 를 묶어서 사용 \n//redux-persist를 사용해서 로컬스토리지에 state 값을 저장하고 페이지가 새로고침이 되면 \n//initialState  값이 로컬스토리에 저장된 state 값으로 대체되기 때문에 초기화 되지 않는다. \n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nconst persistor = persistStore(store);\nexport { store, persistor };","map":{"version":3,"names":["combineReducers","configureStore","userSlice","cartSlice","persistStore","persistReducer","storage","productSlice","persistConfig","key","rootReducer","cart","user","product","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor"],"sources":["C:/Users/kyhh3/Desktop/redux-1-main (2)/src/store/index.js"],"sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit'\n//import counterSlice from './counter/counterSlice'\nimport userSlice from './user/userSlice'\nimport cartSlice from './cart/cartSlice'\nimport { persistStore, persistReducer } from 'reduxjs-toolkit-persist'\n //persistReducer 리듀서가 실행될때 persist 를 같이 사용하게 묶어서 사용\nimport storage from 'reduxjs-toolkit-persist/lib/storage' \nimport productSlice from './product/productSlice'\n//import storageSession from 'reduxjs-toolkit-persist/lib/storage/session' //세션스토리지\n\nconst persistConfig = {\n  key: 'root', //  localStorage에 저장될 때의 key값.\n  storage,\n}\n\nconst rootReducer = combineReducers({\n  cart:cartSlice,\n  user:userSlice,\n  product:productSlice\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n//rootReducer 와 persist 를 묶어서 사용 \n//redux-persist를 사용해서 로컬스토리지에 state 값을 저장하고 페이지가 새로고침이 되면 \n//initialState  값이 로컬스토리에 저장된 state 값으로 대체되기 때문에 초기화 되지 않는다. \n\nconst store = configureStore({\n  reducer:persistedReducer,\n  middleware: (getDefaultMiddleware)=> getDefaultMiddleware({\n    serializableCheck: false,\n  })\n})\n\nconst persistor =  persistStore(store);\n\nexport {store , persistor};\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAClE;AACA,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,YAAY,EAAEC,cAAc,QAAQ,yBAAyB;AACrE;AACD,OAAOC,OAAO,MAAM,qCAAqC;AACzD,OAAOC,YAAY,MAAM,wBAAwB;AACjD;;AAEA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EAAE;EACbH;AACF,CAAC;AAED,MAAMI,WAAW,GAAGV,eAAe,CAAC;EAClCW,IAAI,EAACR,SAAS;EACdS,IAAI,EAACV,SAAS;EACdW,OAAO,EAACN;AACV,CAAC,CAAC;AAEF,MAAMO,gBAAgB,GAAGT,cAAc,CAACG,aAAa,EAAEE,WAAW,CAAC;AACnE;AACA;AACA;;AAEA,MAAMK,KAAK,GAAGd,cAAc,CAAC;EAC3Be,OAAO,EAACF,gBAAgB;EACxBG,UAAU,EAAGC,oBAAoB,IAAIA,oBAAoB,CAAC;IACxDC,iBAAiB,EAAE;EACrB,CAAC;AACH,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAIhB,YAAY,CAACW,KAAK,CAAC;AAEtC,SAAQA,KAAK,EAAGK,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}