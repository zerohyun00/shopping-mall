{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEFAULT_VERSION } from './constants';\nexport default function createMigrate(migrations, config) {\n  const {\n    debug\n  } = config || {};\n  return function (state, currentVersion) {\n    if (!state) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: no inbound state, skipping migration');\n      return Promise.resolve(undefined);\n    }\n    const inboundVersion = state._persist && state._persist.version !== undefined ? state._persist.version : DEFAULT_VERSION;\n    if (inboundVersion === currentVersion) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: versions match, noop migration');\n      return Promise.resolve(state);\n    }\n    if (inboundVersion > currentVersion) {\n      if (process.env.NODE_ENV !== 'production') console.error('reduxjs-toolkit-persist: downgrading version is not supported');\n      return Promise.resolve(state);\n    }\n    const migrationKeys = Object.keys(migrations).map(ver => parseInt(ver)).filter(key => currentVersion >= key && key > inboundVersion).sort((a, b) => a - b);\n    if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: migrationKeys', migrationKeys);\n    try {\n      const migratedState = migrationKeys.reduce((state, versionKey) => {\n        if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: running migration for versionKey', versionKey);\n        return migrations[versionKey](state);\n      }, state);\n      return Promise.resolve(migratedState);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n}","map":{"version":3,"names":["DEFAULT_VERSION","createMigrate","migrations","config","debug","state","currentVersion","process","env","NODE_ENV","console","log","Promise","resolve","undefined","inboundVersion","_persist","version","error","migrationKeys","Object","keys","map","ver","parseInt","filter","key","sort","a","b","migratedState","reduce","versionKey","err","reject"],"sources":["C:/Users/kyhh3/Desktop/redux-1-main (2)/node_modules/reduxjs-toolkit-persist/es/createMigrate.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEFAULT_VERSION } from './constants';\nexport default function createMigrate(migrations, config) {\n    const { debug } = config || {};\n    return function (state, currentVersion) {\n        if (!state) {\n            if (process.env.NODE_ENV !== 'production' && debug)\n                console.log('reduxjs-toolkit-persist: no inbound state, skipping migration');\n            return Promise.resolve(undefined);\n        }\n        const inboundVersion = state._persist && state._persist.version !== undefined\n            ? state._persist.version\n            : DEFAULT_VERSION;\n        if (inboundVersion === currentVersion) {\n            if (process.env.NODE_ENV !== 'production' && debug)\n                console.log('reduxjs-toolkit-persist: versions match, noop migration');\n            return Promise.resolve(state);\n        }\n        if (inboundVersion > currentVersion) {\n            if (process.env.NODE_ENV !== 'production')\n                console.error('reduxjs-toolkit-persist: downgrading version is not supported');\n            return Promise.resolve(state);\n        }\n        const migrationKeys = Object.keys(migrations)\n            .map(ver => parseInt(ver))\n            .filter(key => currentVersion >= key && key > inboundVersion)\n            .sort((a, b) => a - b);\n        if (process.env.NODE_ENV !== 'production' && debug)\n            console.log('reduxjs-toolkit-persist: migrationKeys', migrationKeys);\n        try {\n            const migratedState = migrationKeys.reduce((state, versionKey) => {\n                if (process.env.NODE_ENV !== 'production' && debug)\n                    console.log('reduxjs-toolkit-persist: running migration for versionKey', versionKey);\n                return migrations[versionKey](state);\n            }, state);\n            return Promise.resolve(migratedState);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    };\n}\n"],"mappings":"AAAA;AACA,SAASA,eAAe,QAAQ,aAAa;AAC7C,eAAe,SAASC,aAAa,CAACC,UAAU,EAAEC,MAAM,EAAE;EACtD,MAAM;IAAEC;EAAM,CAAC,GAAGD,MAAM,IAAI,CAAC,CAAC;EAC9B,OAAO,UAAUE,KAAK,EAAEC,cAAc,EAAE;IACpC,IAAI,CAACD,KAAK,EAAE;MACR,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIL,KAAK,EAC9CM,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;MAChF,OAAOC,OAAO,CAACC,OAAO,CAACC,SAAS,CAAC;IACrC;IACA,MAAMC,cAAc,GAAGV,KAAK,CAACW,QAAQ,IAAIX,KAAK,CAACW,QAAQ,CAACC,OAAO,KAAKH,SAAS,GACvET,KAAK,CAACW,QAAQ,CAACC,OAAO,GACtBjB,eAAe;IACrB,IAAIe,cAAc,KAAKT,cAAc,EAAE;MACnC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIL,KAAK,EAC9CM,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MAC1E,OAAOC,OAAO,CAACC,OAAO,CAACR,KAAK,CAAC;IACjC;IACA,IAAIU,cAAc,GAAGT,cAAc,EAAE;MACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EACrCC,OAAO,CAACQ,KAAK,CAAC,+DAA+D,CAAC;MAClF,OAAON,OAAO,CAACC,OAAO,CAACR,KAAK,CAAC;IACjC;IACA,MAAMc,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACnB,UAAU,CAAC,CACxCoB,GAAG,CAACC,GAAG,IAAIC,QAAQ,CAACD,GAAG,CAAC,CAAC,CACzBE,MAAM,CAACC,GAAG,IAAIpB,cAAc,IAAIoB,GAAG,IAAIA,GAAG,GAAGX,cAAc,CAAC,CAC5DY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IAC1B,IAAItB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIL,KAAK,EAC9CM,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEQ,aAAa,CAAC;IACxE,IAAI;MACA,MAAMW,aAAa,GAAGX,aAAa,CAACY,MAAM,CAAC,CAAC1B,KAAK,EAAE2B,UAAU,KAAK;QAC9D,IAAIzB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIL,KAAK,EAC9CM,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAEqB,UAAU,CAAC;QACxF,OAAO9B,UAAU,CAAC8B,UAAU,CAAC,CAAC3B,KAAK,CAAC;MACxC,CAAC,EAAEA,KAAK,CAAC;MACT,OAAOO,OAAO,CAACC,OAAO,CAACiB,aAAa,CAAC;IACzC,CAAC,CACD,OAAOG,GAAG,EAAE;MACR,OAAOrB,OAAO,CAACsB,MAAM,CAACD,GAAG,CAAC;IAC9B;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}